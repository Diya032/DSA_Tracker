# PRIORITY QUEUE , HEAP(MIN,MAX), UNDERSTAND nth_element working in detail, HASHMAP


class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        int n=nums.size()-1;
        return nums[n-(k-1)];
        
    }
};

//using std::nth_element()

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        nth_element(nums.begin(),nums.begin()+ k-1,nums.end(),std::greater<int>());
        return nums[k-1];
    }
};


