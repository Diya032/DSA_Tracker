SAME CODE DECREASING TIME COMPLEXITIES

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int n = nums.size();
        int i=0;
        int k =n-1;
        vector<int>ans(n,0);
        int j = n-1;
        while(i<=j){
            if(abs(nums[i])>abs(nums[j])){
                ans[k--]= nums[i]*nums[i];
                i++;
            }
            else{
                ans[k--]= nums[j]*nums[j];
                j--;
                
            }
        }
        return ans;
    }
};

SAME CODE BUT LESSER /COMPACT LINES

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res(A.size());
        int left = 0, right = A.size() - 1;
        for (int k = A.size() - 1; k >= 0; k--) {

            if (abs(A[right]) > abs(A[left])) 
                res[k] = A[right] * A[right--];

            else 
                res[k] = A[left] * A[left++];
        }
        return res;
    }
};


class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        int k = n - 1;
        vector<int> ans(n);
        while(low <= high){
            if(abs(nums[low]) > abs(nums[high])){
                ans[k--] = nums[low] * nums[low++];
            }
            else {
                ans[k--] = nums[high] * nums[high--];
            }
        }

        return ans;
    }
};
