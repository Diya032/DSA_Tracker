// Pair struct is used to return
// two values from getMinMax()
struct Pair
{
    int min;
    int max;
};

1. Using Linear search O(n) and O(1)
2. Using the tournament method O(n) and O(nlogn) ; algorithm paradigm: Divide and conquer (recurrence relation too)

1. Pair getminmax(int A[],int n){
        
        struct Pair minmax;
        
        if(n==1){
            minmax.max = A[0];
            minmax.min = A[0];
            return minmax;
        
        }
        
        if(A[0] <A[1]){
            minmax.max = A[1];
            minmax.min = A[0];
        }
        else{
            minmax.max = A[0];
            minmax.min = A[1];
        
        }
        
        for(int i =2; i<n;i++){
            if(A[i]> minmax.max){
                minmax.max=A[i];            }
            else if(A[i]<minmax.min){
                minmax.min = A[i];
            }
            
        }
        
        return minmax;
}


2. Pair getminmax(int A[],int low,int high){
       struct Pair minmax;
       
       if(low==high){
           minmax.max =A[low];
           minmax.min =A[low];
           return minmax;
       }
       
       // If there are two elements
    if (high == low + 1) {
        if (arr[low] > arr[high]) {
            minmax.max = arr[low];
            minmax.min = arr[high];
        }
        else {
            minmax.max = arr[high];
            minmax.min = arr[low];
        }
        return minmax;
    }
 
    // If there are more than 2 elements
    mid = (low + high) / 2;
    mml = getMinMax(arr, low, mid);
    mmr = getMinMax(arr, mid + 1, high);
 
    // Compare minimums of two parts
    if (mml.min < mmr.min)
        minmax.min = mml.min;
    else
        minmax.min = mmr.min;
 
    // Compare maximums of two parts
    if (mml.max > mmr.max)
        minmax.max = mml.max;
    else
        minmax.max = mmr.max;
 
    return minmax;
}
       
       

