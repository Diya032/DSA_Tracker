class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        nums.push_back(target);
        sort(nums.begin(),nums.end());
        for(int i=0 ; i<nums.size() ; i++){
            if(nums[i]==target){
                return i;
            }
        }
        return 0;
    }
};

//////\\\\\\\\\

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int s = 0,e = nums.size()-1,mid = 0;

        while(s <= e){
            mid = s + (e-s)/2;

            if(nums[mid]==target)
                return mid;
            else if(nums[mid] < target)
                s = mid + 1;
            else
                e = mid - 1;

        }

        if(target > nums[mid])
            return mid + 1;
        else
            return mid;
    }
};
/////

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int s=0,e=nums.size()-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }
           else if(nums[mid]<target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return s;
    }
};


