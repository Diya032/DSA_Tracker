1.Brute force
2. optimized by two pointer
3. further optimization by hash map

class Solution {
public:
    
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int,int>mp;
        for (int i = 0; i < nums.size(); i++) {
            if(mp.find(target-nums[i]) != mp.end()){
                ans.push_back(mp[target-nums[i]]);
                ans.push_back(i);
                return ans;
            }
            mp[nums[i]] = i;
        }
        return ans;
    }
};
        
 https://leetcode.com/problems/3sum/solutions/2957079/c-naive-tle-two-pointer-a-c-explained-faster-than-92/
