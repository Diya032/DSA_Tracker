https://leetcode.com/problems/find-target-indices-after-sorting-array/solutions/1606564/4-different-ways-binary-search-counting-sort-time-complexities-explained/?orderBy=most_votes


class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        vector<int>ans;
        sort(nums.begin(),nums.end());
        
        int n= nums.size();
        int s=0, e=n-1;

        while(s<=e){
            int mid = s + (e-s)/2;
            if(nums[mid] == target){
                ans.push_back(mid);
                int z = mid+1;
                int k = mid-1;
                
                // to find/search for same element/target/mid on the left part of vector and the right
                while(z<n && nums[z] == target){
                    ans.push_back(z);
                    z++;
                }

                while(k>=0 && nums[k] == target){
                    ans.push_back(k);
                    k--;
                }
                break;
            }
            
            else if(nums[mid]<target){
                    s = mid + 1;
                }

            else{
                e = mid -1;
            }
        }
        
        // More than 1 element in array then sort;
        if(ans.size()>1){
            sort(ans.begin(),ans.end());
        }
        return ans;
    }
};
