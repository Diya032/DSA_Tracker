class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
       vector<int>v1;
       int n=nums.size();
       int ct=0,i=0,j=1;
       //sort(nums.begin(),nums.end(),greater<int>());
       while(i<n){
            while(j!=i)
            {
                if(nums[j]<nums[i])
                ct++;
                j=(j+1)%n;
            }
            v1.push_back(ct);
            ct=0;
            i++;
            if(i<n-1)
            j=i+1;
            else
            j=(i+1)%n;

        }
        return v1;

    }
};


/////

class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        int n = nums.size()-1;
       
   vector<int>v;
      for(int i = 0 ; i<=n; i++){
        int count =n;
          for(int j=0;j<=n;j++){
           if(i==j){
               continue;
           }
           if(nums[j]>=nums[i]){
                   count--;
            }

            }
           v.push_back(count);
           }
        return v ;
    }
};

//////

class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> temp=nums;
        vector<int> res;
        sort(temp.begin(),temp.end());
        unordered_map<int,int> mapi;
        mapi[temp[0]]=0;
        for(int i=1;i<temp.size();i++){
            if(temp[i]==temp[i-1]){
                continue;
            }
            else mapi[temp[i]]=i;
        }
        for(int i=0;i<nums.size();i++){
            res.push_back(mapi[nums[i]]);
        }
        
        return res;
    }
};
