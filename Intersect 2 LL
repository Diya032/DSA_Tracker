Method 3(Using the difference in node counts) T.C=>O(m+n) S.C=>O(1)

1. Get the count of the nodes in the first list, let the count be c1.
2. Get the count of the nodes in the second list, let the count be c2.
3. Get the difference of counts d = abs(c1 â€“ c2)
4. Now traverse the bigger list from the first node to d nodes so that from here onwards both the lists have an equal no of nodes
5. Then we can traverse both lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)

Method 8 (2 Pointer)             T.C=>O(m+n) S.C=>O(1)
Using Two pointers : 

1. Initialize two pointers ptr1 and ptr2  at head1 and  head2.
2. Traverse through the lists, one node at a time.
3. When ptr1 reaches the end of a list, then redirect it to head2.
   similarly, when ptr2 reaches the end of a list, redirect it to the head1.
4. Once both of them go through reassigning, they will be equidistant from 
   the collision point
5. If at any node ptr1 meets ptr2, then it is the intersection node.
6. After the second iteration if there is no intersection node it returns NULL.

Method 1 (2 loops)      T.C=> O(n*m) S.C=>O(1)

CODE METHOD 3 : BUT THIS ONE EXCEEDS TIME LIMIT
int countnodes(ListNode * head){
         if(!head) return 0;
         int count = 0;
         while(head){
             countnodes(head->next);
             count++;
         }
     return count;
}
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
         ListNode * A = headA;
         ListNode * B = headB;
         
         a = countnodes(A);
         b = countnodes(B);
         
         int D = abs(a-b);
         
         if(a>b){
             // Move the pointer forward
               for (int i = 0; i < d; i++) {
                    if (A == NULL) {
                         return -1;
                    }
                 A = A->next;
               }
            }
         else{       
              for (int i = 0; i < d; i++) {
                    if (B == NULL) {
                         return -1;
                     }
                 B = B->next;        
               }
           }
         while(A && B){
             if(A==B){
                 return A;
             }
             A = A->next;
             B = B->next;
         
         }
        return; 
    }

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    int countnodes(ListNode * head){
        ListNode* curr = head;
        if(!curr) return 0;
        int count = 0;
        while(curr){
            countnodes(curr->next);
            count++;
        }
     return count;
    }
    int _getIntesectionNode(int d, ListNode* head1, ListNode* head2){
        
        ListNode* A = head1;
        ListNode* B = head2;
 
     
        for (int i = 0; i < d; i++) {
            if (!A) {
                return -1;
            }
            A = A->next;
        }
 
        while (A != NULL && B != NULL) {
            if (A == B)
                return A->val;

            A = A->next;
            B = B->next;
        }
 
        return -1;
    }

    int getIntersectionNode(ListNode *headA, ListNode *headB) {

        
         
        int a = countnodes(headA);
        int b = countnodes(headB);
         
        int d = abs(a-b);
         
        if(a>b){
            
            return _getIntesectionNode(d,headA,headB);
        }
        else{
            return _getIntesectionNode(d,headB,headA);
        }


             
    }
        
    
};
