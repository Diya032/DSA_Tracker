class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size()-1;
        int low = 0, high = n;
        while( low <= high){
            int mid = (high+low)/2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] > target) high = mid -1;
            else low = mid + 1;
        }
        return -1;
  }
};

//////////////////////////////////////////////////////////

class Solution {
    int binarysearch(vector<int>& nums, int start, int end, int target) {
        if (start > end) return -1;
        int mid = start + (end-start)/2;
        if (nums[mid] == target) return mid;
        else if (nums[mid] < target) return binarysearch(nums, mid+1, end, target);
        else return binarysearch(nums, start, mid-1, target);
    }
    public:
    int search(vector<int>& nums, int target) {
        return binarysearch(nums, 0, nums.size()-1, target);
    }
};

