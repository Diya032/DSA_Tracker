// Two pointer approach

a slow pointer and a fast pointer   (len-k+1) th node

int kthnode(int k){
    //declare 2 pointers 
    Node *s = head;
    Node *f = head;
    
    // if list is empty, return
    if (head == NULL) {
        cout << "List is empty" << endl;
        return;

    //move fast pointer before
    for(int i =0; i<n ; i++){
        f=f->next;
        if (f == NULL) {
                cout << k
                     << " is greater than no. of nodes in "
                        "the list"
                     << endl;
                return;
    }
    
    //Now move both pointers together with gap in b/w maintained
    
    while(f->next != NULL && f != NULL){
        s=s->next;
        f=f->next;
    
    }
    
    return s->data;
}
