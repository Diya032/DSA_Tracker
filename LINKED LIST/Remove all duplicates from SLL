/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head||!head->next) return head;
        ListNode* dummyNode = new ListNode(-1);
        ListNode* itr = dummyNode;
        itr->next = head;
        ListNode* curr = head->next ;
        

        
        while(curr){
            bool flag = false;
            while(curr && itr->next->val==curr->val){
                flag = true;
                curr=curr->next;
            }
            if(flag) itr->next = curr; //also visulize edgecase if duplicates at end and curr becomes NULL
            else itr = itr->next;
            if(curr) curr=curr->next;
        }
        return dummyNode->next;

        
    }
};

//Method 2: GFG

void removeAllDuplicates(struct Node*& start)
{
    // create a dummy node
    // that acts like a fake
    // head of list pointing
    // to the original head
    Node* dummy = new Node;
  
    // dummy node points
    // to the original head
    dummy->next = start;
  
    // Node pointing to last
    // node which has no duplicate.
    Node* prev = dummy;
  
    // Node used to traverse
    // the linked list.
    Node* current = start;
  
    while (current != NULL) {
        // Until the current and
        // previous values are
        // same, keep updating current
        while (current->next != NULL && prev->next->data == current->next->data)
            current = current->next;
  
        // if current has unique value
        // i.e current is not updated,
        // Move the prev pointer to
        // next node
        if (prev->next == current)
            prev = prev->next;
  
        // when current is updated
        // to the last duplicate
        // value of that segment,
        // make prev the next of current
        else
            prev->next = current->next;
  
        current = current->next;
    }
  
    // update original head to
    // the next of dummy node
    start = dummy->next;
}
