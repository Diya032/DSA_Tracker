/* WRITE CODE HERE */ Comparewith iterative alternative

1. RECURSIVE REVERSE
 
 ListNode* reverseList(ListNode* head){
     
     if (!head || !head->next) return head;
     
     rest = reverseList(head->next)    // 1->2->3->4->5->NULL                stack=  5(TOS),4,3,2,1]   for 1->2<-3<-4<-5<-NULL
                                                                                                       for 2->3<-4<-5<-NULL
                                                                                                       for 3->4<-5<-NULL
                                                                                                       for 4->5<-NULL
                                                                                                       for 5->NULL
                                                                                                       for NULL
 
     EXAMPLE FOR 2->3<-4<-5<-NULL
                 |   {--rest---}
                head
     
     head->next->next = head; // reversing the 2->3 link to 2<-3
      |     |             |
      2     3             2
     
     head->next = NULL; // NULL<- 2<-3<-4<-5<-NULL
     
     return rest;
     
 
 }
 
 2. RECURSIVE MERGE SLL
 
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 || !l2) return l1?l1:l2;

        if(l1->val<l2->val){
            l1->next = mergeTwoLists(l1->next,l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};
