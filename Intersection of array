class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int>mp;
        for(auto x:nums1)
        mp[x]=1;
        vector<int>ans;
        for(auto x:nums2)
        {
            if(mp[x]==1)
            {
                ans.push_back(x);
                mp[x]=0;
            }
        }
        return ans;
    }
};

//////
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> st(nums1.begin(), nums1.end());
        vector<int> res;
        for(int itr = 0; itr < nums2.size(); itr++){
            if(st.find(nums2[itr]) != st.end()){
                res.push_back(nums2[itr]);
                st.erase(nums2[itr]);
            }            
        }
        return res;
    }
};
//////

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector <int> v;
        int i = 0, j = 0;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i] == nums2[j]){
                v.push_back(nums1[i]);
                i++;
                j++;
            }
            else if (nums1[i] < nums2[j]){
                i++;
            }
            else{
                //if nums1[i] > nums2[j]
                j++;
            }
            //below both while statements written because Each element in the ans must be 'unique'
            while(i > 0 && i < nums1.size() && nums1[i] == nums1[i - 1])
                  i++;
            while(j > 0 && j < nums2.size() && nums2[j] == nums2[j - 1])
                  j++;
        }
        return v;
    }
};
