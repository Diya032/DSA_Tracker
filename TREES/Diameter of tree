
 
 The question can be solved by small modification to program of Height of tree.
The idea is quite simple. Max value of Height(leftSubtree)+Height(rightSubtree) (at any node ) is the diameter. Keep track of maxium diameter duing traversal and find the height of the tree.

d=max(d,ld+rd); => This line maintains the max diameter.
 */
 
class Solution {
public:

    int maxHeight(TreeNode* root, int& dia) {

        //base case -> if leaf node, return height 0.
        if(root == NULL) {
            return 0;
        }

        //recursive call for to find max height of each subtree
        int leftHeight = maxHeight(root->left, dia);
        int rightHeight = maxHeight(root -> right, dia);

        //if the sum of new max heights greater than already existing diameter
        dia = max(dia, leftHeight + rightHeight);

        // return max height of the subtree + 1 for the root node
        return 1+ max(leftHeight, rightHeight);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int dia = 0;
        maxHeight(root, dia);
        return dia;
    }
};

//My initial inebrited try :)

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        
        int ld = diameterOfBinaryTree(root->left);
        int rd = diameterOfBinaryTree(root->right);

        if(ld==0) return rd;
        if(rd==0) return ld;

        return ld + rd;
        
    }
};

