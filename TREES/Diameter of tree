/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 Just use the concept of finding the height of tree . And in case of diameter check at each node where height of left subtree + right subtree is maximum.

Approach
Update the dis with max at each step using:
dis=max(dis,l+r);
height of left subtree:
 */
 
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter=0;
        height(root,diameter);
        return diameter;
    }
    int height(TreeNode* node,int& diameter){
        if(!node){
            return 0;
        }
        int lh=height(node->left,diameter);
        int rh=height(node->right,diameter);
        diameter=max(diameter,lh+rh);
        return 1+ max(lh,rh);


    }
};

//My initial inebrited try :)

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        
        int ld = diameterOfBinaryTree(root->left);
        int rd = diameterOfBinaryTree(root->right);

        if(ld==0) return rd;
        if(rd==0) return ld;

        return ld + rd;
        
    }
};

