class Solution {
public:
    TreeNode* buildBST(ListNode* head) {
        if(!head) return nullptr;

        ListNode *slow = head, *fast = head, *prev = nullptr;
 
        while(fast && fast->next) {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        if(prev) prev -> next = nullptr;
        if(slow == head) head = nullptr;

        TreeNode* node = new TreeNode(slow->val);

        node -> left = buildBST(head);
        node -> right = buildBST(slow->next);

        return node;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        return buildBST(head);
    }
};


#SAME METHOD JUST CODE DIFFERENT , MORE EXPLINATORY

  class Solution {
    public:
        TreeNode *sortedListToBST(ListNode *head) {
            if(!head) return NULL;
            if(!head->next) return new TreeNode(head->val);
            
            // fast/slow pointer to find the midpoint
            auto slow = head;
            auto fast = head;
            auto pre = head;
            while(fast && fast->next) {
                pre = slow;
                slow = slow->next;
                fast = fast->next->next;
            }
            pre->next = 0; // break two halves 
            
            // slow is the midpoint, use as root
            TreeNode* root = new TreeNode(slow->val);
            root->left = sortedListToBST(head);
            root->right = sortedListToBST(slow->next);
            
            return root;
        }
    };

# WITH NO EXTRA SPACE BUT MORE TC
class Solution {
public:
    int getValue(ListNode* head, int mid) {
        while(mid--) {
            if(head == NULL) return -1;
            
            head = head->next;
        }
        
        return head->val;
    }
    
    TreeNode* sortedArrayToBST(ListNode* head, int start, int end) {
        if(start > end) return NULL;
        
        int mid = (start + end) / 2;
        
        int valAtMid = getValue(head, mid);
        
        TreeNode* root = new TreeNode(valAtMid);
        
        root->left = sortedArrayToBST(head, start, mid - 1);
        root->right = sortedArrayToBST(head, mid + 1, end);
    
        return root;
    }
    
    int lengthOfList(ListNode* head) {
        int size = 0;
        
        while(head != NULL) {
            size++;
            head = head->next;
        }
        
        return size++;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == NULL) return NULL;
        
        int size = lengthOfList(head);

        return sortedArrayToBST(head, 0, size - 1);        
    }
};

# WITH EXTRA SPACE BUT LESS TC

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& arr, int start, int end) {
        if(start > end) return NULL;
        
        int mid = (start + end) / 2;
        
        TreeNode* root = new TreeNode(arr[mid]);
        
        root->left = sortedArrayToBST(arr, start, mid - 1);
        root->right = sortedArrayToBST(arr, mid + 1, end);
    
        return root;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == NULL) return NULL;
        
        vector<int> values;
        
        while(head != NULL) {
            values.push_back(head->val);
            head = head->next;
        }
        
        return sortedArrayToBST(values, 0, values.size() - 1);        
    }
};
